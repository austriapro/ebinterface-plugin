using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace LogWriter
{
    public class Logging
    {
        private static string _logfn;
        private static void GetLogFn()
        {
            const string logDir = @"C:\temp";
            string logfn;
            if (!Directory.Exists(logDir))
            {
                Directory.CreateDirectory(logDir);
            }
            logfn = System.IO.Path.Combine(logDir, "WordPlugIn" + DateTime.Now.ToString("yyyy-MM-dd-HHmmssff") + ".log");
            _logfn = logfn;
        }
        private static Mutex _semaphore = new Mutex();
        public static void LogWrite(string format, params object[] parms)
        {
            LogWrite(string.Format(format,parms));
        }
        public static void LogWrite(string message)
        {
#if !NOLOG
            if (_semaphore.WaitOne(50))
            {
                string msg = "";
                if (string.IsNullOrEmpty(_logfn))
                {
                    GetLogFn();
                    msg = "Timestamp\tDeclaring Type\tName\tMessage";
                    File.AppendAllLines(_logfn, new List<string> { msg });
                }
                StackTrace stackTrace = new StackTrace();
                MethodBase methodBase = stackTrace.GetFrame(1).GetMethod();
                msg = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss,ff\t") + methodBase.DeclaringType.FullName + "\t" + methodBase.Name + "\t" + message;
                File.AppendAllLines(_logfn, new List<string> { msg });
            }
            else
            {
                // Silently skip
                Debug.WriteLine("Semaphore ot acquired.");
            }            

#endif
        }

    }
}
